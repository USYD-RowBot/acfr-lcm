<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<!-- Created by htmlize-1.34 in css mode. -->
<html>
  <head>
    <title>main.c</title>
    <style type="text/css">
    <!--
      body {
        color: #ffffff;
        background-color: #000000;
      }
      .constant {
        /* font-lock-constant-face */
        color: #0FAA4C;
      }
      .doc {
        /* font-lock-doc-face */
        color: #A2AB64;
      }
      .function-name {
        /* font-lock-function-name-face */
        color: #9B703F;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #D56758;
      }
      .preprocessor {
        /* font-lock-preprocessor-face */
        color: #7fffd4;
      }
      .string {
        /* font-lock-string-face */
        color: #A2AB64;
      }
      .type {
        /* font-lock-type-face */
        color: #9B703F;
      }
      .variable-name {
        /* font-lock-variable-name-face */
        color: #7587A6;
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    -->
    </style>
  </head>
  <body>
    <pre>
<span class="doc">/**
 * </span><span class="doc"><span class="constant">@author</span></span><span class="doc"> Paul Ozog - paulozog</span><span class="doc"><span class="constant">@umich</span></span><span class="doc">.edu
 *
 * </span><span class="doc"><span class="constant">@file</span></span><span class="doc"> pelican/main.c
 *
 * </span><span class="doc"><span class="constant">@brief</span></span><span class="doc"> Telemetry driver for Asc Tech Pelican UAV
 */</span>
<span class="preprocessor">#include</span> <span class="string">&lt;stdio.h&gt;</span>
<span class="preprocessor">#include</span> <span class="string">&lt;stdlib.h&gt;</span>
<span class="preprocessor">#include</span> <span class="string">&lt;inttypes.h&gt;</span>
<span class="preprocessor">#include</span> <span class="string">&lt;string.h&gt;</span>
<span class="preprocessor">#include</span> <span class="string">&lt;unistd.h&gt;</span>

<span class="preprocessor">#include</span> <span class="string">"perls-common/timestamp.h"</span>
<span class="preprocessor">#include</span> <span class="string">"perls-common/getopt.h"</span>
<span class="preprocessor">#include</span> <span class="string">"perls-common/error.h"</span>
<span class="preprocessor">#include</span> <span class="string">"perls-common/generic_sensor_driver.h"</span>

<span class="preprocessor">#include</span> <span class="string">"perls-lcmtypes/senlcm_pelican_t.h"</span>

<span class="preprocessor">#include</span> <span class="string">"pelican.h"</span>

<span class="doc">/**
 * </span><span class="doc"><span class="constant">@brief</span></span><span class="doc"> Send the command to poll for telemetry
 * </span><span class="doc"><span class="constant">@param</span></span><span class="doc"> gsd : the program's generic sensor driver
 *
 * </span><span class="doc"><span class="constant">@param</span></span><span class="doc"> len : the size of the struct you want to poll (ie: the size
 * of the LL_STATUS struct)
 *
 * </span><span class="doc"><span class="constant">@param</span></span><span class="doc"> msg : Should contain the preamble "&gt;*&gt;p" and the type of the
 * struct you wish to poll
 *
 * </span><span class="doc"><span class="constant">@param</span></span><span class="doc"> buf : Will store the data here
 *
 * </span><span class="doc"><span class="constant">@param</span></span><span class="doc"> utime : Needed for timeout
 *
 * </span><span class="doc"><span class="constant">@return</span></span><span class="doc"> length of buf
 */</span>
<span class="keyword">static</span> <span class="type">int</span>
<span class="function-name">poll_data</span> (<span class="type">generic_sensor_driver_t</span> *<span class="variable-name">gsd</span>, 
                      <span class="type">uint16_t</span> <span class="variable-name">len</span>,
                      <span class="type">pelic_query_t</span> *<span class="variable-name">msq</span>, <span class="type">uint8_t</span> <span class="variable-name">buf</span>[], 
                      <span class="type">int64_t</span> *<span class="variable-name">utime</span>) {

  gsd_noncanonical (gsd, len, 0);

  <span class="type">int</span> <span class="variable-name">length</span> = 0;

  <span class="keyword">while</span> (length == 0) {

    gsd_write (gsd, (<span class="type">char</span>*)&amp;msq-&gt;preamble, 4);
    gsd_write (gsd, (<span class="type">char</span>*)&amp;msq-&gt;packetType, <span class="keyword">sizeof</span>(uint16_t));
    length = gsd_read_timeout (gsd, (<span class="type">char</span>*)buf, PELIC_MAX_LEN, utime, 100000);
    
  }

  <span class="keyword">return</span> length;

}

<span class="doc">/**
 * </span><span class="doc"><span class="constant">@brief</span></span><span class="doc"> Wrapper to poll_data, update GSD stats for "good" and "bad"
 * packets
 *
 * </span><span class="doc"><span class="constant">@param</span></span><span class="doc">  gsd 
 *
 * </span><span class="doc"><span class="constant">@param</span></span><span class="doc"> packetType : The type of packet we wish to poll (see
 * documentation for Pelican)
 *
 * </span><span class="doc"><span class="constant">@param</span></span><span class="doc"> len : The length of the struct we are polling (see
 * documentation for Pelican)
 *
 * </span><span class="doc"><span class="constant">@param</span></span><span class="doc"> pelic : lcm struct for Pelican
 *
 * </span><span class="doc"><span class="constant">@return</span></span><span class="doc"> None
 */</span>
<span class="keyword">static</span> <span class="type">void</span> 
<span class="function-name">pollPelic</span> (<span class="type">generic_sensor_driver_t</span> *<span class="variable-name">gsd</span>,
                       <span class="type">uint16_t</span> <span class="variable-name">packetType</span>,
                       <span class="type">uint16_t</span> <span class="variable-name">len</span>,
                       <span class="type">senlcm_pelican_t</span>      *<span class="variable-name">pelic</span>) {
  
  <span class="type">uint8_t</span> <span class="variable-name">buf</span>[PELIC_MAX_LEN];
  <span class="type">int</span> <span class="variable-name">bufLen</span>, <span class="variable-name">success</span>;

  <span class="type">pelic_query_t</span> <span class="variable-name">queryMsg</span> = {
    .preamble   = PELIC_QUERY_STR,
    .packetType = packetType,
  };

  bufLen = poll_data(gsd, len, &amp;queryMsg, buf, &amp;pelic-&gt;utime);

  success = pelic_parsePacket(buf, bufLen, pelic);

  <span class="keyword">if</span> (success &gt; 0) {

    pelic-&gt;utime = timestamp_now();
    senlcm_pelican_t_publish(gsd-&gt;lcm, gsd-&gt;channel, pelic);
    gsd_update_stats(gsd,1);

  }
  <span class="keyword">else</span> {

    gsd_update_stats(gsd, 0);
  
  }

}

<span class="doc">/**
 * </span><span class="doc"><span class="constant">@brief</span></span><span class="doc"> Extend generic_sensor_driver_t's command line arguments
 *
 * </span><span class="doc"><span class="constant">@param</span></span><span class="doc"> gsd
 *
 * </span><span class="doc"><span class="constant">@return</span></span><span class="doc"> 0 for sucess, ? for not sucess
 */</span>
<span class="keyword">static</span> <span class="type">int</span>
<span class="function-name">getOpts</span> (<span class="type">generic_sensor_driver_t</span>* <span class="variable-name">gsd</span>) {
  
  getopt_add_description(gsd-&gt;gopt, <span class="string">"Pelican pelican sensor driver."</span>);

  <span class="keyword">return</span> 0;

}

<span class="doc">/**
 * </span><span class="doc"><span class="constant">@brief</span></span><span class="doc"> Poll for desired data types.
 *
 * </span><span class="doc"><span class="constant">@details</span></span><span class="doc"> Get lowlevel (LL) status, calc IMU data, and GPS data
 * every iteration.  Get remote control (RC) data every 5 iterations
 */</span>
<span class="type">int</span>
<span class="function-name">main</span> (<span class="type">int</span> <span class="variable-name">argc</span>, <span class="type">char</span>* <span class="variable-name">argv</span>[]) {
  
  <span class="type">generic_sensor_driver_t</span> *<span class="variable-name">gsd</span> = gsd_create(argc, argv, <span class="constant">NULL</span>, getOpts);

  gsd_launch(gsd);

  <span class="type">senlcm_pelican_t</span> <span class="variable-name">pelic</span>;
  memset(&amp;pelic, 0, <span class="keyword">sizeof</span>(pelic));

  <span class="type">uint8_t</span> <span class="variable-name">iteration</span> = 0;
  <span class="keyword">while</span> (1) {
    
    pollPelic(gsd, PELIC_LLSTATUS_CMD,
              <span class="keyword">sizeof</span>(pelic_LlStatusStruct) + 11, &amp;pelic);

    pollPelic(gsd, PELIC_IMU_CALCDATA_CMD,
              <span class="keyword">sizeof</span>(pelic_ImuCalcDataStruct) + 11, &amp;pelic);

    pollPelic(gsd, PELIC_GPS_DATA_CMD,
              <span class="keyword">sizeof</span>(pelic_GpsDataStruct) + 11, &amp;pelic);

    <span class="keyword">if</span> (iteration % 5 == 0)
      pollPelic(gsd, PELIC_RC_DATA_CMD,
                <span class="keyword">sizeof</span>(pelic_RcDataStruct) + 11, &amp;pelic);
    
    iteration++;
    
  }

  <span class="keyword">return</span> 0;

}
</pre>
  </body>
</html>
