package pilot_gui;
import lcm.lcm.*;
import java.util.Scanner;
import java.io.*;
import java.lang.Math;
import hauv.pl_raw_t;
import hauv.pl_san_t;
import hauv.pl_ghp_t;
import hauv.pl_gbp_t;
import hauv.pl_rbo_t;
import hauv.bs_nvg_t;
import hauv.bs_rnv_t;
import hauv.bs_dvl_t;
import hauv.vehicle_state_t;
import hauv.vehicle_plan_t;


//package pilot;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PilotGUI.java
 *
 * Created on Sep 4, 2009, 2:18:03 PM
 */

//package pilot; Comment this line out when not using NetBeans

/**
 *
 * @author benglot
 */
public class PilotGUISlicesTampa extends javax.swing.JFrame {

    //Declare a few variables
    // Thread t = null;
    LCM myLCM = LCM.getSingleton();
    //static ReceiveRNV rnv = new ReceiveRNV();
    //static ReceiveNVG nvg = new ReceiveNVG();
    //public static int flag = 0;
    //public static int clickCount = 0;
    //public double reset = 0;
    //public double wayptCount = 0;
    //public double vehLocation = 0;

    static double width = 0;
    static double length = 0;
    static double des_depth = 0; //Edit as desired depending on operating environment
    static double heading_cmd = 0;

    // Fields specificallly needed for "slices"
    static double offset = 0;
    static double minlength = 0;
    static double minwidth = 0;
    static double bigslice = 0;
    static double smallslice = 0; //Spacing between big slices, in meters
    static double numbig = 0;
    static double numsmall = 0;

    static double ptSpace = 1; // Minimum spacing between waypoints, in meters
    static double middlePtsL = 0; // Number of intermediate points sandwiched inside a large slice
    static double middlePtsW = 0;
    static double middlePtsB = 0;	
    static int index = 0;

    static boolean ulb;
    static boolean urb;
    static boolean lrb;
    static boolean llb;
    static boolean cwb;
    static boolean ccwb;
    static boolean surge;
    static boolean sway;

    ///////New variables for the PLAN message/////////
    
    static int npoints;// = 6 + (int)numbig + (int)numsmall; //Size is unique to this particular class
    // numbig and numsmall aren't defined yet
    static double[][] waypts;// = new double[npoints][2]; //Size is unique to this particular class
    static boolean stop = false;
    static boolean heading = false;
    static boolean holdStation = false;
    static boolean broadcast = false;


    /** Creates new form PilotGUI */
    public PilotGUISlicesTampa() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DirectionButtonGroup = new javax.swing.ButtonGroup();
        VehLocationButtonGroup = new javax.swing.ButtonGroup();
        SliceDirectionButtonGroup = new javax.swing.ButtonGroup();
        ClockwiseButton = new javax.swing.JRadioButton();
        CounterclockwiseButton = new javax.swing.JRadioButton();
        WidthField = new javax.swing.JTextField();
        LengthField = new javax.swing.JTextField();
        WidthLabel = new javax.swing.JLabel();
        LengthLabel = new javax.swing.JLabel();
        UpperLeftRadioButton = new javax.swing.JRadioButton();
        UpperRightRadioButton = new javax.swing.JRadioButton();
        LowerLeftRadioButton = new javax.swing.JRadioButton();
        LowerRightRadioButton = new javax.swing.JRadioButton();
        BroadcastButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();
        ClockwiseLabel = new javax.swing.JLabel();
        SurgeButton = new javax.swing.JRadioButton();
        SwayButton = new javax.swing.JRadioButton();
        SurgeSwayLabel = new javax.swing.JLabel();
        OffsetField = new javax.swing.JTextField();
        OffsetLabel = new javax.swing.JLabel();
        DepthField = new javax.swing.JTextField();
        SpacingField = new javax.swing.JTextField();
        DepthLabel = new javax.swing.JLabel();
        SpacingLabel = new javax.swing.JLabel();
        HeadingField = new javax.swing.JTextField();
        HeadingButton = new javax.swing.JButton();
        HoldStationButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HAUV Pilot Planner");

        DirectionButtonGroup.add(ClockwiseButton);
        ClockwiseButton.setSelected(true);
        ClockwiseButton.setText("Clockwise");
        ClockwiseButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    ClockwiseButtonActionPerformed(evt);
                }
            });

        DirectionButtonGroup.add(CounterclockwiseButton);
        CounterclockwiseButton.setText("Counterclockwise");
        CounterclockwiseButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    CounterclockwiseButtonActionPerformed(evt);
                }
            });

        WidthField.setText("0");
        WidthField.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    WidthFieldActionPerformed(evt);
                }
            });

        LengthField.setText("0");
        LengthField.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    LengthFieldActionPerformed(evt);
                }
            });

        WidthLabel.setText("Width");

        LengthLabel.setText("Length");

        VehLocationButtonGroup.add(UpperLeftRadioButton);
        UpperLeftRadioButton.setSelected(true);
        UpperLeftRadioButton.setText("HAUV Location");
        UpperLeftRadioButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    UpperLeftRadioButtonActionPerformed(evt);
                }
            });

        VehLocationButtonGroup.add(UpperRightRadioButton);
        UpperRightRadioButton.setText("HAUV Location");
        UpperRightRadioButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    UpperRightRadioButtonActionPerformed(evt);
                }
            });

        VehLocationButtonGroup.add(LowerLeftRadioButton);
        LowerLeftRadioButton.setText("HAUV Location");
        LowerLeftRadioButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    LowerLeftRadioButtonActionPerformed(evt);
                }
            });

        VehLocationButtonGroup.add(LowerRightRadioButton);
        LowerRightRadioButton.setText("HAUV Location");
        LowerRightRadioButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    LowerRightRadioButtonActionPerformed(evt);
                }
            });

        BroadcastButton.setText("Broadcast!");
        BroadcastButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BroadcastButtonActionPerformed(evt);
                }
            });

        StopButton.setText("Stop!");
        StopButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    StopButtonActionPerformed(evt);
                }
            });

        ClockwiseLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        ClockwiseLabel.setText("Initial Rectangular Survey Direction:");

        SliceDirectionButtonGroup.add(SurgeButton);
        SurgeButton.setText("Surge");
        SurgeButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    SurgeButtonActionPerformed(evt);
                }
            });

        SliceDirectionButtonGroup.add(SwayButton);
        SwayButton.setSelected(true);
        SwayButton.setText("Sway");
        SwayButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    SwayButtonActionPerformed(evt);
                }
            });

        SurgeSwayLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        SurgeSwayLabel.setText("Primary Direction of Travel:");

        OffsetField.setText("0");
        OffsetField.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    OffsetFieldActionPerformed(evt);
                }
            });

        OffsetLabel.setText("Offset of Slice Boundary from Rectangle");

        DepthField.setText("0");
        DepthField.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    DepthFieldActionPerformed(evt);
                }
            });

        SpacingField.setText("0");
        SpacingField.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    SpacingFieldActionPerformed(evt);
                }
            });

        DepthLabel.setText("Depth");

        SpacingLabel.setText("Spacing Between Slices");

        HeadingField.setText("0");
        HeadingField.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    HeadingFieldActionPerformed(evt);
                }
            });

        HeadingButton.setText("Adjust Heading");
        HeadingButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    HeadingButtonActionPerformed(evt);
                }
            });

        HoldStationButton.setText("Hold Station");
        HoldStationButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    HoldStationButtonActionPerformed(evt);
                }
            });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                  .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                      .addGroup(layout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                          .addComponent(LowerLeftRadioButton, javax.swing.GroupLayout.Alignment.LEADING)
                                                                          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                                    .addComponent(LengthField, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                    .addComponent(LengthLabel))
                                                                          .addComponent(UpperLeftRadioButton, javax.swing.GroupLayout.Alignment.LEADING))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                              .addComponent(ClockwiseLabel)
                                                                                              .addGroup(layout.createSequentialGroup()
                                                                                                        .addComponent(ClockwiseButton)
                                                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                        .addComponent(CounterclockwiseButton))
                                                                                              .addComponent(SurgeSwayLabel)
                                                                                              .addGroup(layout.createSequentialGroup()
                                                                                                        .addComponent(SurgeButton)
                                                                                                        .addGap(29, 29, 29)
                                                                                                        .addComponent(SwayButton))
                                                                                              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                                                                  .addComponent(SpacingField, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                                                                                                  .addComponent(OffsetField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                                                                                                                  .addComponent(DepthField))
                                                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                                                  .addComponent(OffsetLabel)
                                                                                                                  .addComponent(DepthLabel)
                                                                                                                  .addComponent(SpacingLabel))
                                                                                                        .addGap(72, 72, 72)))
                                                                                    .addGroup(layout.createSequentialGroup()
                                                                                              .addGap(41, 41, 41)
                                                                                              .addComponent(WidthField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                              .addComponent(WidthLabel)
                                                                                              .addGap(127, 127, 127)
                                                                                              .addComponent(UpperRightRadioButton)))
                                                                          .addComponent(LowerRightRadioButton)))
                                                      .addGroup(layout.createSequentialGroup()
                                                                .addGap(161, 161, 161)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                          .addGroup(layout.createSequentialGroup()
                                                                                    .addComponent(BroadcastButton)
                                                                                    .addGap(18, 18, 18)
                                                                                    .addComponent(StopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                                    .addComponent(HoldStationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                                              .addComponent(HeadingField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                              .addComponent(HeadingButton))))))
                                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                  );
        layout.setVerticalGroup(
                                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                          .addContainerGap()
                                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                              .addComponent(UpperLeftRadioButton)
                                                              .addGap(101, 101, 101)
                                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(LengthLabel)
                                                                        .addComponent(LengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                              .addGap(120, 120, 120)
                                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(LowerLeftRadioButton)
                                                                        .addComponent(LowerRightRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE))
                                                    .addGroup(layout.createSequentialGroup()
                                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(WidthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(UpperRightRadioButton)
                                                                        .addComponent(WidthLabel))
                                                              .addGap(18, 18, 18)
                                                              .addComponent(ClockwiseLabel)
                                                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(ClockwiseButton)
                                                                        .addComponent(CounterclockwiseButton))
                                                              .addGap(13, 13, 13)
                                                              .addComponent(SurgeSwayLabel)
                                                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(SurgeButton)
                                                                        .addComponent(SwayButton))
                                                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(OffsetField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(OffsetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(DepthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(DepthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                              .addGap(9, 9, 9)
                                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(SpacingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(SpacingLabel))
                                                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(BroadcastButton)
                                                                        .addComponent(StopButton))
                                                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                              .addComponent(HoldStationButton)
                                                              .addGap(6, 6, 6)))
                                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(HeadingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(HeadingButton))
                                          .addContainerGap())
                                );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void WidthFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WidthFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WidthFieldActionPerformed

    private void ClockwiseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClockwiseButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClockwiseButtonActionPerformed

    private void CounterclockwiseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CounterclockwiseButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CounterclockwiseButtonActionPerformed

    private void LengthFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LengthFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LengthFieldActionPerformed

    private void UpperLeftRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpperLeftRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UpperLeftRadioButtonActionPerformed

    private void UpperRightRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpperRightRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UpperRightRadioButtonActionPerformed

    private void LowerRightRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LowerRightRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LowerRightRadioButtonActionPerformed

    private void LowerLeftRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LowerLeftRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LowerLeftRadioButtonActionPerformed

    private void BroadcastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BroadcastButtonActionPerformed
        broadcast = true;

        //Read in the width and length fields
        width = Double.parseDouble(WidthField.getText());
        length = Double.parseDouble(LengthField.getText());
        offset = Double.parseDouble(OffsetField.getText());
        des_depth = Double.parseDouble(DepthField.getText());
        smallslice = Double.parseDouble(SpacingField.getText());	

        ulb = UpperLeftRadioButton.isSelected();
        urb = UpperRightRadioButton.isSelected();
        lrb = LowerRightRadioButton.isSelected();
        llb = LowerLeftRadioButton.isSelected();
        cwb = ClockwiseButton.isSelected();
        ccwb = CounterclockwiseButton.isSelected();
        surge = SurgeButton.isSelected();
        sway = SwayButton.isSelected();

		int divCheck = 0; //used to check divisibility of slice number

        //Set the slice size parameters (smallslice is already defined above)
        if (surge) {
            bigslice = length + offset*2;
            if (Math.round(Math.abs(Math.round((width+offset*2)/smallslice)-((width+offset*2)/smallslice))) == 0) {	   
                numsmall = Math.round((width+offset*2)/smallslice) + 1;
            }
            else {
                numsmall = Math.round((width+offset*2)/smallslice);
            }
            // Make sure numsmall is divisible by four
            while (divCheck == 0) {
                if (numsmall % 4 == 0) { 
                    numbig = numsmall;
                    divCheck = 1;
                }
                else {
                    numsmall++;
                }
            }
        }
        else {
            bigslice = width + offset*2;
            if (Math.round(Math.abs(Math.round((length+offset*2)/smallslice)-((length+offset*2)/smallslice))) == 0) {	   
                numsmall = Math.round((length+offset*2)/smallslice) + 1;
            }
            else {
                numsmall = Math.round((length+offset*2)/smallslice);
            }
            // Make sure numsmall is divisible by four
            while (divCheck == 0) {
                if (numsmall % 4 == 0) { 
                    numbig = numsmall;
                    divCheck = 1;
                }
                else {
                    numsmall++;
                }
            }
        }
	
        ///////////////////////////////////////////////////////////////////////////////
        //Figure out how many intermediate waypoints to sandwich inside the large slice
        middlePtsW = width/ptSpace;
        middlePtsW = Math.round(middlePtsW);
        if (middlePtsW*ptSpace >= width) {
            middlePtsW = middlePtsW - 1;
        }
        middlePtsL = length/ptSpace;
        middlePtsL = Math.round(middlePtsL);
        if (middlePtsL*ptSpace >= length) {
            middlePtsL = middlePtsL - 1;
        }
        middlePtsB = bigslice/ptSpace;
        middlePtsB = Math.round(middlePtsB);
        if (middlePtsB*ptSpace >= bigslice) {
            middlePtsB = middlePtsB - 1;
        }
        //Now middlePts extra waypoints should be inserted into each large slice
        ///////////////////////////////////////////////////////////////////////////////

        //Figure out which corner contains the HAUV
        //npoints = 6 + (int)(2*middlePtsW + 2*middlePtsL) + (int)numbig + (int)numsmall + 1 + (int)(middlePtsB*(numbig+1)) ;
        npoints = 1 + (int)numbig + (int)numsmall + 1 + (int)(middlePtsB*(numbig+1)) ;
        waypts = new double[npoints][2];
        index = 0;

        if (ulb) {
            /*
              if (cwb) {
              //double[][] waypts = {{0,0},{0,width},{-length,width},{-length,0}};
              index = 1;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][1] = waypts[index-1][1] + ptSpace;
              index++;
              }
              waypts[index][1] = width; //corner 2 
              index++;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] - ptSpace;
              waypts[index][1] = width;
              index++; 
              }
              waypts[index][0] = -length; //corner 3
              waypts[index][1] = width;
              index++;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][0] = -length;
              waypts[index][1] = waypts[index-1][1] - ptSpace;
              index++;
              } 
              waypts[index][0] = -length; //corner 4 
              index++; 
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] + ptSpace;
              index++;
              }
              //corner 5 is the origin, no modifications needed
              index++; //increment once more for the origin
              }
              else {
              //double[][] waypts = {{0,0},{-length,0},{-length,width},{0,width}};
              index = 1;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] - ptSpace;
              index++;
              }
              waypts[index][0] = -length; //corner 2
              index++;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][0] = -length;
              waypts[index][1] = waypts[index-1][1] + ptSpace;
              index++;
              }
              waypts[index][0] = -length; //corner 3
              waypts[index][1] = width;
              index++;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] + ptSpace;
              waypts[index][1] = width;
              index++;
              }
              waypts[index][1] = width; //corner 4
              index++;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][1] = waypts[index-1][1] - ptSpace;
              index++;
              }
              //corner 5 is the origin, no modifications needed
              index++; //increment once more for the origin
              }
            */
            // Next, add the slice based on whether we have surge or sway
            if (surge) { //Recursively add the waypoints from the slice survey
		        // add the first waypoint
                waypts[index][0] = offset;
                waypts[index][1] = -offset;
                index++;
                for (int i = 1; i <= (numbig+numsmall)/4;  i++) {
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0] - ptSpace;
                        waypts[index][1] = waypts[index-1][1];
                        index++;
                    }
                    waypts[index][0] = offset - bigslice; //corner 2 
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                    waypts[index][0] = waypts[index-1][0]; //corner 3
                    waypts[index][1] = waypts[index-1][1] + smallslice;
                    index++; 
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0] + ptSpace;
                        waypts[index][1] = waypts[index-1][1];
                        index++; 
                    }		
                    waypts[index][0] = offset; //corner 4
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                    waypts[index][0] = waypts[index-1][0]; //corner 5
                    waypts[index][1] = waypts[index-1][1] + smallslice;
                    index++; 
                }
                for (int j = 0; j < middlePtsB; j++) {
                    waypts[index][0] = waypts[index-1][0] - ptSpace;
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                }
                waypts[index][0] = offset -bigslice;
                waypts[index][1] = waypts[index-1][1];
            }
            else {
                waypts[index][0] = offset;
                waypts[index][1] = -offset;
                index++;
                for (int i = 1; i <= (numbig+numsmall)/4;  i++) {
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0];
                        waypts[index][1] = waypts[index-1][1] + ptSpace;
                        index++;
                    }
                    waypts[index][0] = waypts[index-1][0]; // corner 2
                    waypts[index][1] = -offset + bigslice;
                    index++;
                    waypts[index][0] = waypts[index-1][0] - smallslice; // corner 3
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0];
                        waypts[index][1] = waypts[index-1][1] - ptSpace;
                        index++;
                    } 
                    waypts[index][0] = waypts[index-1][0]; //corner 4
                    waypts[index][1] =  -offset;
                    index++;
                    waypts[index][0] = waypts[index-1][0] - smallslice; //corner 5
                    waypts[index][1] = waypts[index-1][1]; 
                    index++;
                }
                for (int j = 0; j < middlePtsB; j++) {
                    waypts[index][0] = waypts[index-1][0];
                    waypts[index][1] = waypts[index-1][1] + ptSpace;
                    index++;
                } 
                waypts[index][0] = waypts[index-1][0];
                waypts[index][1] = -offset + bigslice; // final corner
            }
        }
        else if (urb) {
            /*
              if (cwb) {
              //double[][] waypts = {{0,0},{-length,0},{-length,-width},{0,-width}};
              index = 1;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] - ptSpace;
              index++;
              }
              waypts[index][0] = -length; //corner 2
              index++;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][0] = -length;
              waypts[index][1] = waypts[index-1][1] - ptSpace;
              index++;
              }
              waypts[index][0] = -length; //corner 3
              waypts[index][1] = -width;
              index++;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] + ptSpace;
              waypts[index][1] = -width;
              index++;
              }
              waypts[index][1] = -width; //corner 4
              index++;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][1] = waypts[index-1][1] + ptSpace;
              index++;
              }
              // now at corner 5, the origin
              index++; //increment once more for origin
              }
              else {
              //double[][] waypts = {{0,0},{0,-width},{-length,-width},{-length,0}};
              index = 1;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][1] = waypts[index-1][1] - ptSpace;
              index++;
              }
              waypts[index][1] = -width; //corner 2
              index++;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] - ptSpace;
              waypts[index][1] = -width;
              index++;
              }
              waypts[index][0] = -length; //corner 3
              waypts[index][1] = -width;
              index++;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][0] = -length;
              waypts[index][1] = waypts[index-1][1] + ptSpace;
              index++;
              }
              waypts[index][0] = -length; //corner 4
              index++;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] + ptSpace;
              index++;
              }
              // now at corner 5, the origin
              index++; //increment once more for origin
              }
            */
            // Next, add the slice based on whether we have surge or sway
            if (surge) { //Recursively add the waypoints from the slice survey
		        // add the first waypoint
                waypts[index][0] = offset;
                waypts[index][1] = offset;
                index++;
                for (int i = 1; i <= (numbig+numsmall)/4;  i++) {
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0] - ptSpace;
                        waypts[index][1] = waypts[index-1][1];
                        index++;
                    }
                    waypts[index][0] = offset - bigslice; //corner 2 
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                    waypts[index][0] = waypts[index-1][0]; //corner 3
                    waypts[index][1] = waypts[index-1][1] - smallslice;
                    index++; 
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0] + ptSpace;
                        waypts[index][1] = waypts[index-1][1];
                        index++;
                    }
                    waypts[index][0] = offset; //corner 4
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                    waypts[index][0] = waypts[index-1][0]; //corner 5
                    waypts[index][1] = waypts[index-1][1] - smallslice;
                    index++; 
                }	
                for (int j = 0; j < middlePtsB; j++) {
                    waypts[index][0] = waypts[index-1][0] - ptSpace;
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                }
                waypts[index][0] = offset - bigslice; //final corner
                waypts[index][1] = waypts[index-1][1];
            }
            else {
                waypts[index][0] = offset;
                waypts[index][1] = offset;
                index++;
                for (int i = 1; i <= (numbig+numsmall)/4;  i++) {
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0];
                        waypts[index][1] = waypts[index-1][1] - ptSpace;					
                        index++;
                    }
                    waypts[index][0] = waypts[index-1][0]; //corner 2 
                    waypts[index][1] = offset - bigslice;
                    index++;
                    waypts[index][0] = waypts[index-1][0] - smallslice; //corner 3
                    waypts[index][1] = waypts[index-1][1];
                    index++; 
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0];
                        waypts[index][1] = waypts[index-1][1] + ptSpace;
                        index++;
                    }
                    waypts[index][0] = waypts[index-1][0]; //corner 4
                    waypts[index][1] =  offset;
                    index++;
                    waypts[index][0] = waypts[index-1][0] - smallslice; //corner 5
                    waypts[index][1] = waypts[index-1][1];
                    index++; 
                }
                for (int j = 0; j < middlePtsB; j++) {
                    waypts[index][0] = waypts[index-1][0];
                    waypts[index][1] = waypts[index-1][1] - ptSpace;
                    index++;
                }
                waypts[index][0] = waypts[index-1][0];
                waypts[index][1] = offset - bigslice; //final corner
            }
        }
        else if (lrb) {
            /*
              if (cwb) {
              //double[][] waypts = {{0,0},{0,-width},{length,-width},{length,0}};
              index = 1;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][1] = waypts[index-1][1] - ptSpace;
              index++;
              }
              waypts[index][1] = -width; //corner 2
              index++;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] + ptSpace;
              waypts[index][1] = -width;
              index++;
              }
              waypts[index][0] = length; //corner 3
              waypts[index][1] = -width;
              index++;	
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][0] = length;
              waypts[index][1] = waypts[index-1][1] + ptSpace;
              index++;
              }
              waypts[index][0] = length; //corner 4
              index++;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] - ptSpace;
              index++;
              }
              //now at corner 5, the origin
              index++; // increment once more for origin
              }
              else {
              //double[][] waypts = {{0,0},{length,0},{length,-width},{0,-width}};
              index = 1;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] + ptSpace;
              index++;
              }
              waypts[index][0] = length; //corner 2
              index++;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][0] = length;	
              waypts[index][1] = waypts[index-1][1] - ptSpace;
              index++;
              }
              waypts[index][0] = length; //corner 3
              waypts[index][1] = -width;
              index++;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] - ptSpace;
              waypts[index][1] = -width;
              index++;
              }
              waypts[index][1] = -width; //corner 4
              index++;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][1] = waypts[index-1][1] + ptSpace;
              index++;
              }
              //now at corner 5, the origin
              index++; //increment once more for the origin
              }
            */
            // Next, add the slice based on whether we have surge or sway
            if (surge) { //Recursively add the waypoints from the slice survey
		        // add the first waypoint
                waypts[index][0] = -offset;
                waypts[index][1] = offset;
                index++;
                for (int i = 1; i <= (numbig+numsmall)/4;  i++) {
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0] + ptSpace;
                        waypts[index][1] = waypts[index-1][1];
                        index++;
                    }
                    waypts[index][0] = -offset + bigslice; //corner 2 
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                    waypts[index][0] = waypts[index-1][0]; //corner 3
                    waypts[index][1] = waypts[index-1][1] - smallslice;
                    index++;
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0] - ptSpace;
                        waypts[index][1] = waypts[index-1][1];
                        index++;
                    } 
                    waypts[index][0] = -offset; //corner 4
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                    waypts[index][0] = waypts[index-1][0]; //corner 5
                    waypts[index][1] = waypts[index-1][1] - smallslice;
                    index++; 
                }
                for (int j = 0; j < middlePtsB; j++) {
                    waypts[index][0] = waypts[index-1][0] + ptSpace;
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                }
                waypts[index][0] = -offset +bigslice; //final corner
                waypts[index][1] = waypts[index-1][1];
            }
            else {
                waypts[index][0] = -offset;
                waypts[index][1] = offset;
                index++;
                for (int i = 1; i <= (numbig+numsmall)/4;  i++) {
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0];
                        waypts[index][1] = waypts[index-1][1] - ptSpace;
                        index++;
                    }
                    waypts[index][0] = waypts[index-1][0]; //corner 2 
                    waypts[index][1] = offset - bigslice;
                    index++;
                    waypts[index][0] = waypts[index-1][0] + smallslice; //corner 3
                    waypts[index][1] = waypts[index-1][1]; 
                    index++;	
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0];
                        waypts[index][1] = waypts[index-1][1] + ptSpace;
                        index++;
                    }
                    waypts[index][0] = waypts[index-1][0]; //corner 4
                    waypts[index][1] =  offset;
                    index++;
                    waypts[index][0] = waypts[index-1][0] + smallslice; //corner 5
                    waypts[index][1] = waypts[index-1][1]; 
                    index++;
                }
                for (int j = 0; j < middlePtsB; j++) {
                    waypts[index][0] = waypts[index-1][0];
                    waypts[index][1] = waypts[index-1][1] -ptSpace;
                    index++;
                }
                waypts[index][0] = waypts[index-1][0]; //final corner
                waypts[index][1] = offset - bigslice;
            }
        }
        else if (llb) {
            /*
              if (cwb) {
              //double[][] waypts = {{0,0},{length,0},{length,width},{0,width}};
              index = 1;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] + ptSpace;
              index++;
              }
              waypts[index][0] = length; //corner 2
              index++;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][0] = length;
              waypts[index][1] = waypts[index-1][1] + ptSpace;
              index++;
              }
              waypts[index][0] = length; //corner 3
              waypts[index][1] = width;
              index++;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] - ptSpace;
              waypts[index][1] = width;
              index++;
              }
              waypts[index][1] = width; //corner 4
              index++;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][1] = waypts[index-1][1] - ptSpace;
              index++;
              }
              //now at corner 5, the origin
              index++; //increment once more for the origin
              }
              else {
              //double[][] waypts = {{0,0},{0,width},{length,width},{length,0}};
              index = 1;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][1] = waypts[index-1][1] + ptSpace;
              index++;
              }
              waypts[index][1] = width; //corner2
              index++;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] + ptSpace;
              waypts[index][1] = width;
              index++;
              }
              waypts[index][0] = length; //corner 3
              waypts[index][1] = width;
              index++;
              for (int i = 0; i < middlePtsW; i++) {
              waypts[index][0] = length;
              waypts[index][1] = waypts[index-1][1] - ptSpace;
              index++;
              }
              waypts[index][0] = length; //corner 4
              index++;
              for (int i = 0; i < middlePtsL; i++) {
              waypts[index][0] = waypts[index-1][0] - ptSpace;
              index++;
              }
              //now at corner 5, the origin
              index++; //increment once more for the origin
              }
            */
            // Next, add the slice based on whether we have surge or sway
            if (surge) { //Recursively add the waypoints from the slice survey
		        // add the first waypoint
                waypts[index][0] = -offset;
                waypts[index][1] = -offset;
                index++;
                for (int i = 1; i <= (numbig+numsmall)/4;  i++) {
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0] + ptSpace;
                        waypts[index][1] = waypts[index-1][1];
                        index++;
                    }
                    waypts[index][0] = -offset + bigslice; //corner 2 
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                    waypts[index][0] = waypts[index-1][0]; //corner 3
                    waypts[index][1] = waypts[index-1][1] + smallslice;
                    index++; 
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0] - ptSpace;
                        waypts[index][1] = waypts[index-1][1];
                        index++;
                    }
                    waypts[index][0] = -offset; //corner 4
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                    waypts[index][0] = waypts[index-1][0]; //corner 5
                    waypts[index][1] = waypts[index-1][1] + smallslice;
                    index++; 
                }
                for (int j = 0; j < middlePtsB; j++) {
                    waypts[index][0] = waypts[index-1][0] + ptSpace;
                    waypts[index][1] = waypts[index-1][1];
                    index++;
                }
                waypts[index][0] = -offset + bigslice; //final corner 
                waypts[index][1] = waypts[index-1][1];
            }
            else {
                waypts[index][0] = -offset;
                waypts[index][1] = -offset;
                index++;
                for (int i = 1; i <= (numbig+numsmall)/4;  i++) {
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0];
                        waypts[index][1] = waypts[index-1][1] + ptSpace;
                        index++;
                    }
                    waypts[index][0] = waypts[index-1][0]; //corner 2 
                    waypts[index][1] = -offset + bigslice;
                    index++;
                    waypts[index][0] = waypts[index-1][0] + smallslice; //corner 3
                    waypts[index][1] = waypts[index-1][1]; 
                    index++;
                    for (int j = 0; j < middlePtsB; j++) {
                        waypts[index][0] = waypts[index-1][0]; 
                        waypts[index][1] = waypts[index-1][1] - ptSpace;
                        index++;
                    }
                    waypts[index][0] = waypts[index-1][0]; //corner 4
                    waypts[index][1] = -offset;
                    index++;
                    waypts[index][0] = waypts[index-1][0] + smallslice; //corner 5
                    waypts[index][1] = waypts[index-1][1];
                    index++; 
                }
                for (int j = 0; j < middlePtsB; j++) {
                    waypts[index][0] = waypts[index-1][0];
                    waypts[index][1] = waypts[index-1][1] + ptSpace;
                    index++;
                }
                waypts[index][0] = waypts[index-1][0];
                waypts[index][1] = -offset + bigslice;
            }
        }

		System.out.println(waypts[0][0]+" "+waypts[0][1]+" "+waypts[1][0]+" "+waypts[1][1]+" "+waypts[2][0]+" "+waypts[2][1]+" "+waypts[3][0]+" "+waypts[3][1]);

        hauv.vehicle_plan_t plan = new hauv.vehicle_plan_t();
        plan.time = System.nanoTime();	    	
        plan.stop = stop;
        plan.broadcast = broadcast;
        plan.holdStation = holdStation;
        plan.heading = heading;
        plan.headingOffset = heading_cmd;
        plan.npoints = npoints;
        plan.waypoints = waypts;
        plan.depth = des_depth;	
        myLCM.publish ("HAUV_VEHICLE_PLAN", plan);

        try {
            //Delay for () milliseconds
            Thread.sleep(100); 
        } catch (InterruptedException ex) {
        } 

        broadcast = false;
        plan.broadcast = broadcast;
        myLCM.publish("HAUV_VEHICLE_PLAN", plan);

    }//GEN-LAST:event_BroadcastButtonActionPerformed

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed

        stop = true;
	
        hauv.vehicle_plan_t plan = new hauv.vehicle_plan_t();
        plan.time = System.nanoTime();	    	
        plan.stop = stop;
        plan.broadcast = broadcast;
        plan.holdStation = holdStation;
        plan.heading = heading;
        plan.headingOffset = heading_cmd;
        plan.npoints = npoints;
        plan.waypoints = waypts;
        plan.depth = des_depth;	
        myLCM.publish ("HAUV_VEHICLE_PLAN", plan);

        try {
            //Delay for () milliseconds
            Thread.sleep(100); 
        } catch (InterruptedException ex) {
        } 

        stop = false;
        plan.stop = stop;
        myLCM.publish("HAUV_VEHICLE_PLAN", plan);


    }//GEN-LAST:event_StopButtonActionPerformed

    private void SurgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SurgeButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SurgeButtonActionPerformed

    private void SwayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SwayButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SwayButtonActionPerformed

    private void OffsetFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OffsetFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OffsetFieldActionPerformed

    private void DepthFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepthFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DepthFieldActionPerformed

    private void SpacingFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpacingFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SpacingFieldActionPerformed

    private void HeadingFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HeadingFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HeadingFieldActionPerformed

    private void HoldStationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoldStationButtonActionPerformed
        // TODO add your handling code here:

        holdStation = HoldStationButton.isSelected();

        hauv.vehicle_plan_t plan = new hauv.vehicle_plan_t();
        plan.time = System.nanoTime();	    	
        plan.stop = stop;
        plan.broadcast = broadcast;
        plan.holdStation = holdStation;
        plan.heading = heading;
        plan.headingOffset = heading_cmd;
        plan.npoints = npoints;
        plan.waypoints = waypts;
        plan.depth = des_depth;	
        myLCM.publish ("HAUV_VEHICLE_PLAN", plan);


    }//GEN-LAST:event_HoldStationButtonActionPerformed

    private void HeadingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HeadingButtonActionPerformed
        // TODO add your handling code here:

        // Publish a new PLAN message with the heading command (can send a few times if necessary)	
        heading_cmd = Double.parseDouble(HeadingField.getText())*Math.PI/180;
        heading = true;

        hauv.vehicle_plan_t plan = new hauv.vehicle_plan_t();
        plan.time = System.nanoTime();	    	
        plan.stop = stop;
        plan.broadcast = broadcast;
        plan.holdStation = holdStation;
        plan.heading = heading;
        plan.headingOffset = heading_cmd;
        plan.npoints = npoints;
        plan.waypoints = waypts;
        plan.depth = des_depth;	
        myLCM.publish ("HAUV_VEHICLE_PLAN", plan);

        try {
            //Delay for () milliseconds
            Thread.sleep(100); 
        } catch (InterruptedException ex) {
        } 

        heading = false;
        plan.heading = heading;
        myLCM.publish("HAUV_VEHICLE_PLAN", plan);


    }//GEN-LAST:event_HeadingButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new PilotGUISlicesTampa().setVisible(true);
                }
            });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BroadcastButton;
    private javax.swing.JRadioButton ClockwiseButton;
    private javax.swing.JLabel ClockwiseLabel;
    private javax.swing.JRadioButton CounterclockwiseButton;
    private javax.swing.JTextField DepthField;
    private javax.swing.JLabel DepthLabel;
    private javax.swing.ButtonGroup DirectionButtonGroup;
    private javax.swing.JButton HeadingButton;
    private javax.swing.JTextField HeadingField;
    private javax.swing.JToggleButton HoldStationButton;
    private javax.swing.JTextField LengthField;
    private javax.swing.JLabel LengthLabel;
    private javax.swing.JRadioButton LowerLeftRadioButton;
    private javax.swing.JRadioButton LowerRightRadioButton;
    private javax.swing.JTextField OffsetField;
    private javax.swing.JLabel OffsetLabel;
    private javax.swing.ButtonGroup SliceDirectionButtonGroup;
    private javax.swing.JTextField SpacingField;
    private javax.swing.JLabel SpacingLabel;
    private javax.swing.JButton StopButton;
    private javax.swing.JRadioButton SurgeButton;
    private javax.swing.JLabel SurgeSwayLabel;
    private javax.swing.JRadioButton SwayButton;
    private javax.swing.JRadioButton UpperLeftRadioButton;
    private javax.swing.JRadioButton UpperRightRadioButton;
    private javax.swing.ButtonGroup VehLocationButtonGroup;
    private javax.swing.JTextField WidthField;
    private javax.swing.JLabel WidthLabel;
    // End of variables declaration//GEN-END:variables

}
