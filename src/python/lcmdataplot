#!/usr/bin/env python
import lcm
import sys
import argparse

from lcmplot import get_message_types, MessageDecoder

if __name__ == '__main__':
    sys.path.insert(0, '/home/auv/git/acfr_lcm/build/lib/python2.7/dist-packages/perls/lcmtypes')

    parser = argparse.ArgumentParser()

    parser.add_argument('filename', type=str)

    args = parser.parse_args()

    import acfrlcm
    import senlcm
    import bot_core
    import bot_frames
    import bot_lcmgl
    import bot_param
    import bot_procman

    lcm_types = get_message_types(acfrlcm)
    lcm_types.update(get_message_types(senlcm))

    lcm_types.update(get_message_types(bot_core))
    lcm_types.update(get_message_types(bot_frames))
    lcm_types.update(get_message_types(bot_lcmgl))
    lcm_types.update(get_message_types(bot_param))
    lcm_types.update(get_message_types(bot_procman))

    lcm_log = lcm.EventLog(args.filename)

    data_handler = MessageDecoder(lcm_types)

    total_size = lcm_log.size()
    last = 0
    step = 5
    for event in lcm_log:
        data_handler.handle_message(event.channel, event.data)
        # decode progress
        percent = 100 * lcm_log.tell() / total_size
        if percent >= last + step:
            print "{:3}".format(percent)
            last += step

    # this extracts the numeric fields, ignoring
    # non-numeric fields that cannot be plotted
    data = data_handler.export()

    # print out the fields we can plot
    print sorted(data.keys())
