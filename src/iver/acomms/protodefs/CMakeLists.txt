# FIND PROTOBUF EXE
find_program (PROTOC_EXE protoc DOC "Location of Protobuf protoc executable.")
if (PROTOC_EXE)
  mark_as_advanced (PROTOC_EXE)
else ()
  message (SEND_ERROR "protobuf protoc executable not found!; on ubuntu `sudo apt-get install protobuf-compiler python-protobuf`")
endif ()

# GENERATE PROTOBUF BINDINGS
if (NOT EXISTS ${INCLUDE_OUTPUT_PATH}/perls-protobuf)
  file (MAKE_DIRECTORY ${INCLUDE_OUTPUT_PATH}/perls-protobuf)
endif ()
set (PROTOBUF_DIR ${INCLUDE_OUTPUT_PATH}/perls-protobuf)
  
set (PROTOBUF_H ${CMAKE_CURRENT_BINARY_DIR}/protobuf.h)
set (PROTOBUF_H_INCLUDE ${INCLUDE_OUTPUT_PATH}/perls-protobuf/protobuf.h)

file (WRITE  ${PROTOBUF_H} "/* CMAKE AUTOGENERATED FILE - DO NOT EDIT BY HAND!! */\n")
file (APPEND ${PROTOBUF_H} "#ifndef __PERLS_PROTOBUF_H__\n")
file (APPEND ${PROTOBUF_H} "#define __PERLS_PROTOBUF_H__\n")
file (APPEND ${PROTOBUF_H} "\n")

set (PROTOBUF_HEADERS "")
set (PROTOBUF_SOURCES "")
file (GLOB PROTO_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.proto)
foreach (PROTO_FILE ${PROTO_FILES})
  get_filename_component (PROTO_NAME ${PROTO_FILE} NAME_WE)
  set (PROTO_C ${CMAKE_CURRENT_BINARY_DIR}/${PROTO_NAME}.pb.cc)
  set (PROTO_H ${CMAKE_CURRENT_BINARY_DIR}/${PROTO_NAME}.pb.h)
  set (INCLUDE_HEADER ${INCLUDE_OUTPUT_PATH}/perls-protobuf/${PROTO_NAME}.pb.h)

  file (APPEND ${PROTOBUF_H} "#include \"${PROTO_NAME}.pb.h\"\n")

  add_custom_command (
    OUTPUT ${PROTO_C} ${PROTO_H} 
    COMMAND ${PROTOC_EXE} -I${CMAKE_CURRENT_BINARY_DIR} -I/usr/local/include/ -I/usr/include/ -I${CMAKE_CURRENT_SOURCE_DIR} --cpp_out=${CMAKE_CURRENT_BINARY_DIR} ${PROTO_FILE} 
    COMMAND cp -u -f ${PROTO_H} ${INCLUDE_HEADER}
    DEPENDS ${PROTO_FILE}
    )

  set (PROTOBUF_SOURCES ${PROTOBUF_SOURCES} ${PROTO_C})
  set (PROTOBUF_HEADERS ${PROTOBUF_HEADERS} ${PROTO_H})
endforeach ()

file (APPEND ${PROTOBUF_H} "\n")
file (APPEND ${PROTOBUF_H} "#endif // __PERLS_PROTOBUF_H__\n")

add_custom_command (
  OUTPUT ${PROTOBUF_H_INCLUDE}
  COMMAND cp -u -f ${PROTOBUF_H} ${PROTOBUF_H_INCLUDE}
  DEPENDS ${PROTOBUF_HEADERS} ${PROTOBUF_H}
  )

# EXTERNAL DEPS
perlsx_goby ()
perlsx_protobuf ()

# BUILD LIB
perls_add_library (perls-protobuf ${PROTOBUF_SOURCES} ${PROTOBUF_HEADERS} ${PROTOBUF_H_INCLUDE})
perls_target_link_libraries (perls-protobuf
  ${PERLSX_GOBY}
  ${PERLSX_PROTOBUF}
  )

# INSTALL LCM-GENERATED HEADERS
install (FILES ${PROTOBUF_HEADERS} ${PROTOBUF_H}
  DESTINATION ${INCLUDE_INSTALL_PATH}/perls-protobuf
  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
  )
