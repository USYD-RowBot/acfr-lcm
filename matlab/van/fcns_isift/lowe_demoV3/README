
         Demo code for detecting and matching SIFT features
         --------------------------------------------------
                    David Lowe (lowe@cs.ubc.ca)
                     Version 3, August 6, 2004


This directory contains a compiled binary program for performing
invariant keypoint detection as well as sample code showing the use of
the SIFT features for image matching.

See the web page at 
  http://www.cs.ubc.ca/~lowe/keypoints/ 
for references to the relevant papers describing this approach.


Detecting invariant keypoints
-----------------------------

The program binary for keypoint extraction is named "keypoints",
and should run under most versions of Linux on Intel compatible
processors.

To detect keypoints and display them on the provided test images, use
the command line option "-display" as follows:

% keypoints -display <book.pgm >result.pgm

This will write out a new image, result.pgm, with arrows overlayed
indicating the locations, scales, and orientations of the key
features.  You can inspect this image using the public domain program xv:

% xv result.pgm

or use any other tool that displays the common PGM image format.


ASCII file output for keypoints
-------------------------------

Without any command line arguments, the "keypoint" program will
output the keypoints in a simple ASCII file format that
is convenient to read by other programs and provides the data needed
for matching keypoints:

% keypoints <book.pgm >book.key

The file format starts with 2 integers giving the total number of
keypoints and the length of the descriptor vector for each keypoint
(128). Then the location of each keypoint in the image is specified by
4 floating point numbers giving subpixel row and column location,
scale, and orientation (in radians from -PI to PI).  Obviously, these
numbers are not invariant to viewpoint, but can be used in later
stages of processing to check for geometric consistency among matches.
Finally, the invariant descriptor vector for the keypoint is given as
a list of 128 integers in range [0,255].  Keypoints from a new image
can be matched to those from previous images by simply looking for the
descriptor vector with closest Euclidean distance among all vectors
from previous images.


Example of image matching using keypoints
-----------------------------------------

To demonstrate the value of the keypoints for image matching, this
directory also contains some simple source code to read keypoints from
2 images and show the best matches between the images with lines drawn
on top of the images connecting the matching locations.

The matches are identified by finding the 2 nearest neighbors of each
keypoint from the first image among those in the second image, and
only accepting a match if the distance to the closest neighbor is less
than 0.6 of that to the second closest neighbor.  The threshold of 0.6
can be adjusted up to select more matches or down to select only the
most reliable.  See my research papers for the justification behind
this approach.

First, create keypoints for each test image:

% keypoints <book.pgm >book.key
% keypoints <scene.pgm >scene.key

To compile the matching code in this directory under Linux, simply do:
% make

This will create a demo program called "match".  This program
requires command line arguments giving each of the two images and
their corresponding keypoints:

% match -im1 book.pgm -k1 book.key -im2 scene.pgm -k2 scene.key > out.pgm

The resulting image in "out.pgm" contains the first image above the
second one, with white lines connecting the matching locations.  Most
of the matches should be correct (as can be roughly judged by the fact
that they select the correct object in a cluttered image), but there
will be a few false outliers that could be removed by enforcing
viewpoint consistency constraints.  You can inspect the matching
results with xv:

% xv out.pgm

You can also try the results for the other objects in the scene:

% keypoints <box.pgm >box.key
% match -im1 box.pgm -k1 box.key -im2 scene.pgm -k2 scene.key > out.pgm
% keypoints <basmati.pgm >basmati.key
% match -im1 basmati.pgm -k1 basmati.key -im2 scene.pgm -k2 scene.key > out.pgm

You should be able to run this demo program to find matches between
any pair of images in PGM format.  Of course, this matching approach
is overly simple, and many more correct matches could be found by
using a higher distance threshold and enforcing viewpoint consistency
constraints between the set of resulting matches to eliminate
outliers, as described in my research papers.


Running from within Matlab
--------------------------

A Matlab program, sift.m, for running the executable and loading SIFT
features has been kindly provided by D. Alvaro and J.J. Guerrero.  It
is run by starting Matlab from the code directory and entering
the following Matlab command:
  [kd,kv] = sift('book.pgm');
It returns the keypoints for the image as a matrix of descriptors, kd,
and image coordinates, kv.  It also creates a figure showing the
keypoint vectors drawn over the input image.  See the comments in
"sift.m" for further details.


Licensing conditions
--------------------

This software is being made available for research purposes only.  See
the file LICENSE in this directory for conditions of use.

