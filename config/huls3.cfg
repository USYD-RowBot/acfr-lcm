viewer {
    renderers {
        graph {
            renderer_key = "isam_graph";
            label = "ISam-Graph";
            channel = "HAUV_ISAM_VIS";
            vlink_channels = ["VLINKS"];
            pltprop {
                # b(blue), r(red), g(green), p(pink), c(cyon), l(lime)
                # "-" (solid line) "." (dotted line)
                # paired input will provide prop for vlink and plink
                node = "k*"; # default = lime dot
                odo  = "b="; # default = blue solid line
                cam   = ["r=", "p-"];
                sonar = ["g=", "l-"];
            }
        }
        
        compass {
            renderer_key = "compass";
        }
        
        hauv {
            renderer_key = "hauv";
            ship_obj_file = "../../config/viewer/obj_models/7723_MSC_TAKR300.obj";
        }

        hauv_pose_attach {
            renderer_key = "hauv_pose_attach";
            robot_obj_file = "../../config/viewer/obj_models/HAUV-v2.obj";
        }

        vanctrl {
            renderer_key = "vanctrl";
        }

        #camctrl {
        #    renderer_key = "camctrl";
        #}

        bot_lcmgl {
            renderer_key = "bot_lcmgl";
            channel = "LCMGL_Sonar";
        }

        #status_text {
        #    renderer_key = "status_text";
        #    data_sources { # key = lcm_channel
        #        perllcm_logbook = "HAUV_STATUS";
        #    }
        #}

    } # renderers
} # viewer

prosilica {
   mono {
      uid = 100815; #GC1380M
      #uid = 37110; #GC1380C
      channel = "PROSILICA_M";
      x_lr = [0,0,0,0,0,0];

      x_s1c = [0, -0.25, 0, 90, 0, 90];               # camera w.r.t. servo1
      #x_s1c = [0, -0.25, 0, 85, -3, 90];               # camera w.r.t. servo1
      #x_vs  = [-0.359, 0.221, -0.382, 150, 0, 90];    # camera w.r.t. vehicle (periscope angle = 0)
      x_vs  = [-0.453, 0.221, -0.457, 145, 0, 90];     # camera w.r.t. vehicle (periscope angle = 60) 

      PvAttributes {
         FrameRate = "2.0";
         FrameStartTriggerMode = "FixedRate";

         # FOR MANUAL MODE
         #ExposureMode = "Manual";
         #ExposureValue = "5000";
         #GainMode = "Manual";
         #GainValue = "15";
            
         # FOR AUTO MODE
         ExposureMode = "Auto";
         ExposureAutoAlg = "Mean"; 
         ExposureAutoMax = "10000"; #"7500"; 
         ExposureAutoMin = "8"; #default value
         ExposureAutoRate = "90"; #pct of max speed
         ExposureAutoTarget = "50";
         
         GainMode = "Auto";
         GainAutoAlg = "Mean"; #USE Default
         GainAutoMax = "30";
         GainAutoMin = "0";
         GainAutoRate = "100"; #USE Default		

         PixelFormat = "Mono16";
         PacketSize = "1500";
         MulticastEnable = "Off";
         SyncOut1Mode = "Imaging";
         StreamBytesPerSecond = "4974760"; #9949520 ~= 80Mbit
                                           #9052160 = (3.25 fps) * (2785280 bytes/frame @ Mono16)
         BinningX = "1";
         BinningY = "1";
      } # PvAttributes

      calib_water {
         #%-- Focal length:
         fc = [ 1661.625862375037514, 1662.228019585469610 ];

         #%-- Principal point:
         cc = [ 676.220839303684443, 546.457924802597631 ];

         #%-- Skew coefficient:
         alpha_c = 0.000000000000000;

         #%-- Distortion coefficients:
         kc = [ 0.144054339382071, 0.397875076904587, 0.004941818939524, -0.000580842072957, 0.000000000000000 ];
         kc_model = "radtan";

         #%-- Focal length uncertainty:
         fc_error = [ 2.635608772644813, 2.602351349007647 ];

         #%-- Principal point uncertainty:
         cc_error = [ 3.867579638801144, 3.926700136008126 ];

         #%-- Skew coefficient uncertainty:
         alpha_c_error = 0.000000000000000;

         #%-- Distortion coefficients uncertainty:
         kc_error = [ 0.009337781621933, 0.091718870932917, 0.001172850013763, 0.001293934986022, 0.000000000000000 ];

         #%-- Image size:
         nx = 1360;
         ny = 1024;
      } # calib_water

      calib_air {
         #%-- Focal length:
         fc = [ 1254.098465278008234, 1255.390495111025757 ];

         #%-- Principal point:
         cc = [ 687.720550136332122, 566.667622394185173 ];

         #%-- Skew coefficient:
         alpha_c = 0.000000000000000;

         #%-- Distortion coefficients:
         kc = [ -0.124525942604206, 0.103738694812594, 0.006662102506681, 0.003109125065647, 0.000000000000000 ];
         kc_model = "radtan";

         #%-- Focal length uncertainty:
         fc_error = [ 2.527785062737517, 2.555847022708655 ];

         #%-- Principal point uncertainty:
         cc_error = [ 4.674096256020311, 4.208864544968002 ];

         #%-- Skew coefficient uncertainty:
         alpha_c_error = 0.000000000000000;

         #%-- Distortion coefficients uncertainty:
         kc_error = [ 0.004562171508604, 0.013870655372693, 0.000828904679665, 0.000889008723512, 0.000000000000000 ];

         #%-- Image size:
         nx = 1360;
         ny = 1024;
      } #calib_air

   } # mono
} #prosilica

sonar {
    x_vs2 = [0, 0, 0, 0, 0, 0];                  # servo2 (pitch_sonar) w.r.t. vehicle for pitch_sonar=0
    mode {
        imaging   = 0;
        split     = 1;
        halfsplit = 2;
        3dfls     = 3;
    }
} #sonar

dvl {
    x_vs1 = [0, 0, 0, 0, 0, 0];                  # servo1 (pitch_dvl) w.r.t. vehicle for pitch_dvl=0
    x_s1d  = [0, 0, 0, -90, 45, 90];             # dvl w.r.t. vehicle (servo1)

    # JHU (another test data from ayoung)
    #x_vs  = [0.08, 0, 0.294, 1.0957, 182.5241, 45.1222];  # dvl w.r.t. vehicle (servo1)

    # DVL Instrument Transformation Matrix (Down)
    tmatrix = [1.0000,   -1.0000,    0.0000,    0.0000,
               0.0000,    0.0000,   -1.0000,    1.0000,
               0.2887,    0.2887,    0.2887,    0.2887,
               0.7071,    0.7071,   -0.7071,   -0.7071];
      
} # dvl

rtvan {
    logdir = "/var/van-processed";
    camera = "prosilica.mono";
    imgstep = 1;                                # process images in every "imgstep" when verifying

    feature_thread {
        ftypes = ["siftgpu"];                       # ["cvsurf", "siftgpu", "harris"];
        feat_patch_w = 5;                           # patch size for harris pts (2w+1 x 2w+1)
        #siftgpu_server = "141.212.93.97";          # if not provided, it reaches the server in local machine
        #siftgpu_server = "192.168.0.202";          # if not provided, it reaches the server in local machine
        #surfgpu_server = "141.212.194.236";              # if not provided, it reaches the server in local machine
        use_surfgpu     = 1;                        #If 0, use opencv surf (which is 10x slower than GPU)
    } #feature_thread

    twoview_thread {
        tv_pccs_fudge = 1.0;
        nav_thresh_sigma = 3.0;
        sift_simAB_thres = 0.70;                    # simscore threshold for sift & surf. if 1, no comparison
        harris_simAB_thres = 0.35;                  # simscore threshold for harris patch. if 1, no comparison
        tv_min_npts = 10;                           # min points needed in twoview register
        tv_tri_const_min_dist = -100.0;             # min dist in triangulation constraint [% of the avg offset]
        tv_tri_const_max_dist = 100.0;              # max dist in triangulation constraint [% of the avg offset]
    } #twoview_thread

    link_thread {
        use_seserver = 0;           # use seserver
        use_isamserver = 1;         # use isam server (both cannot be 1)
        min_overlap = 0.1;          # min image overlap percent [%]
        max_overlap = 1.0;          # max image overlap percent [%]
        n_plinks = 3;               # number of links to propose
        add_node_thresh = 0.1;      # min dist to add a node [m]
        Ig_thresh = 0.2;            # information gain thresh (0.0 = no Ig check)
        use_sal_add_node = 0;
        use_manual_plinks = 0;      # load "./plink_manual.list"
        use_se_vlink      = 1;
    } #link_thread

    slam_thread {
    } #slam_thread

    hauv_thread {# note x,y,z meters r,p,h degrees
        periscope_mode = 0;                 # OFF: we consider dvl pitch / ON: read static cooridate w/o dvl pitch
        sonar_mode = sonar.mode.imaging;    # imaging / split / halfsplit / 3dfls
    } #hauv_thread

    saliency_thread {
        sal_new_vocab_sim_thresh = 0.5;
        sal_new_vocab_motion_thresh = 1.0;
        S_L_thresh = 0.4;
        S_G_thresh = 0.5;
    } # saliency_thread

    post_process {
        save_corrset = 0;                  # write corrset (inliers) into file for mosaic
        save_bathy = 0;                    # writt dvl point cloud
        save_link_info = 0;                # save link info (utimei / utimej / saliency / Ig / verified)
        save_image_bow = 0;
        save_saliency = 1;
        selftest_saliency = 1;
    } # post_process

    plot_thread {
        scale = 0.4;
        plot_vice_versa = 0;            # do you want to see motion both of 1 to 2 and 2 to 1 ?
        vis_plot_features = 0;
        vis_plot_scene_prior = 0;
        vis_plot_put_corr = 0;
        vis_plot_search_ellipses = 0;
        vis_plot_in_and_out = 0;
        vis_plot_inliers = 0;
        vis_plot_relpose = 0;
        vis_plot_3pts = 0;
        vis_plot_relpose_3pts = 0;
        vis_plot_summary = 0;
        vis_plot_waitkey = 0;
        vis_manual_corr = 0;
        vis_mdist_plink = 0;
        vis_plot_saliency = 1;
        vis_use_saliency = 1;
    } #plot_thread
    
    channel {
        VAN_OPTIONS_CHANNEL = "VAN_OPTIONS";
    }

} # rtvan

seserver {
    camera = "prosilica.mono";
    cam_add_node = 0.1;
    batchstep = 50;                     # camera events between batch update request
    step_size = 5.0;                    # step size for adding nodes from odometry

    propose_link {
        # for now thresh = euclidean distance [m]
        cam_min_dist = 0.0;
        cam_max_dist = 1.0;
        cam_min_overlap = 0.4;          # min image overlap percent [%]
        cam_max_overlap = 1.0;          # max image overlap percent [%]
        max_cam_n_plinks = 5;   

        sonar_thresh = 1;
    } #propose_link

    viewer {
        # viewer covariance plot option
        inflate = 1.0;                  # inflate covariance ellipsoid
        nsigma = 3.0;                   # look at n-sigma covariance
    } # viewer

} # seserver

hauv-client {
    lcm_channels {
        RTVAN_ADD_NODE_CHANNEL = "ADD_NODE_RTVAN";      #channel that rtvan adds nodes
        SONAR_ADD_NODE_CHANNEL = "ADD_NODE_SONAR";      #channel that sonar adds nodes
        SELF_ADD_NODE_CHANNEL  = "ADD_NODE_HAUV";       #FOR TESTING ONLY
    }

    wp_nav { # waypoint navigation
        GOTO_STATE_CHANNEL     = "WP_GOTO_STATE";
        GOTO_CHANNEL           = "WP_GOTO";
        GOTO_RQ_CHANNEL        = "WP_GOTO_RQ";
        WP_LIST_CHANNEL        = "WP_LIST";             # wp broadcasting for visualization
        SAVE_CMD_CHANNEL       = "SAVE_WP";             # save wp command from viewer
    }
}

sonar-client {
    propose_link {
        plink_thresh = 1;       # link proposal range [m]
    }
}

isamServer {
    # channel names
    lcm_channels {
        ADD_NODE_CHANNEL               = "ADD_NODE";
        ADD_NODE_ACK_CHANNEL           = "ADD_NODE_ACK";
        RETURN_ST_CHANNEL              = "RETURN_STATE";
        REQUEST_ST_CHANNEL             = "REQUEST_STATE";
        VLINK_CHANNEL                  = "VLINKS";
        PLINK_CHANNEL                  = "PLINKS";
        INIT_ISAM_CHANNEL              = "INIT_ISAM";
        CMD_CHANNEL                    = "CMD";
        IFNO_CHANNEL                   = "INFO";        
        VIS_CHANNEL                    = "HAUV_ISAM_VIS";
    } # lcm_channels

    # init parameters
    isam_init {
        mod_solve                   = 1;
        mod_update                  = 1;
        max_iterations              = 1;         # default 500
        mod_batch                   = 100000000; #50;       # default 100, hull inspection used 50
        verbose                     = 1;         # default false
    }

    # post processing
    post_process {
        save_cputime = 1;
        #timing_fname = "cputime.dat";   # cputime
        #mucov_fname = "mucov.dat";      # mu and cov
        graph_fname = "graph.isam";     # isam graph
        #pc_fname = "pc.dat";            # pose3d collection
    } # post_process
}

cam-feature {
    image_channel       = "prosilica.mono.channel";
    feature_channel     = "VAN_FEATURES";
    logdir              = "rtvan.logdir";
    ftypes              = "rtvan.feature_thread.ftypes";
    feat_patch_w        = 5;
    #siftgpu_server     = "10.0.3.107";             # if not provided, it reaches the server in local machine
    camera_config_key   = "prosilica.mono";
    camera_calib_key    = "prosilica.mono.calib_water";
}
